import asyncio
from aiogram import Bot, Dispatcher, types, executor
import Values

TOKEN = None

with open('token.txt') as file:
    TOKEN = file.read().strip()
    file.close()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –≤–µ—Å—å –∫–æ–¥ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –ø—Ä–æ—Å—Ç–æ –≥–æ—Ä–∞–∑–¥–æ —É–¥–æ–±–Ω–µ–µ –±—ã–ª–æ –ø–∏—Å–∞—Ç—å –≤—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ,
# –∏–±–æ –µ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤.
# —Ç–∞–∫ –∂–µ –±—É–¥—É—Ç –≤ –∫–∞–∫–∏—Ö-—Ç–æ –±–ª–æ–∫–∞—Ö –∑–∞–º–µ–Ω—é –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–∞ —Å—Ç–µ–π—Ç—ã. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Å–¥–µ–ª–∞–Ω—ã –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã.



@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    mess = '–ü—Ä–∏–≤–µ—Ç, <b>{} {}</b>! –¢—ã —É–∂–µ –æ–∫–æ–Ω—á–∏–ª —à–∫–æ–ª—É –∏–ª–∏ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–∫–æ–Ω—á–∏—à—å. ' \
           '–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –ø–æ—è–≤–∏—Ç—Å—è —Å–ª–æ–∂–Ω—ã–π –≤—ã–±–æ—Ä ‚Äì "–ö—É–¥–∞ –ø–æ—Å—Ç—É–ø–∏—Ç—å?". ' \
           '–ú—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —ç—Ç–∏–º –∏ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ–± –ò–†–ò–¢-–†–¢–§!'.format(msg.from_user.first_name,
                                                                         msg.from_user.last_name)
    await msg.answer_photo(open('pictures/logo/entrant_irit-rtf.jpg', 'rb'), caption=mess, parse_mode='html')

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton('–ü–æ–µ—Ö–∞–ª–∏ üöÄ')
    keyboard.add(button)

    await msg.answer('–ù–∞–∂–º–∏ "–ü–æ–µ—Ö–∞–ª–∏ üöÄ", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –ò–†–ò–¢-–†–¢–§!', reply_markup=keyboard)


@dp.message_handler(commands=['points'])
async def actual_points(msg: types.Message):
    mess = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{}</b>'.format(Values.correct_answers)
    await msg.answer(mess, parse_mode='html')


@dp.message_handler(lambda msg: msg.text == '–ü–æ–µ—Ö–∞–ª–∏ üöÄ')
async def block_2(msg: types.Message):
    if Values.checker == 0:
        Values.checker = 1
        mess_1 = '–ü—Ä–∏–≤–µ—Ç, —è –ú–∞—Ä–∏—à–∞! –Ø –±—É–¥—É —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å —Ç–µ–±—è –≤—Å—é –Ω–∞—à—É —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ –ò–†–ò–¢-–†–¢–§ –∏ —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ–±–æ –≤—Å–µ–º.'
        await msg.answer_photo(open('pictures/marisha/render_1.2.png', 'rb'),
                               caption=mess_1,
                               reply_markup=types.ReplyKeyboardRemove())

        mess_2 = '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–∑–Ω–∞—Ç—å –æ–± –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ –∏–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞. ' \
                 '–í —ç—Ç–æ–º –Ω–∞–º –ø–æ–º–æ–∂–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ ‚Äì <b>–û–±–∞–±–∫–æ–≤ –ò–ª—å—è –ù–∏–∫–æ–ª–∞–µ–≤–∏—á</b>.'
        keyboard_1 = types.InlineKeyboardMarkup()
        button_1_1 = types.InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–ª–∏–∫', url='https://vk.com/video-165382372_456239062')
        keyboard_1.add(button_1_1)
        await msg.answer(mess_2, reply_markup=keyboard_1, parse_mode='html')

        keyboard_2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_2_1 = types.KeyboardButton('‚úÖ')
        keyboard_2.add(button_2_1)

        await msg.answer('–ù–∞–∂–º–∏ "‚úÖ", –µ—Å–ª–∏ —Ç—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤–∏–¥–µ–æ –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å!',
                         reply_markup=keyboard_2)


@dp.message_handler(lambda msg: msg.text == '‚úÖ')
async def block_3(msg: types.Message):
    if Values.checker == 1:
        Values.checker = 2
        mess = '–û–æ–æ–∫–µ–π, —Ç–µ–ø–µ—Ä—å –í—ã –Ω–µ–º–Ω–æ–≥–æ –∑–Ω–∞–µ—Ç–µ –æ–± –ò–†–ò–¢-–†–¢–§.\n' \
               '–ù–æ –∫–∞–∫ –∂–µ –∑–≤—É—á–∏—Ç –æ–¥–∏–Ω –∏–∑ –µ–≥–æ –ª–æ–∑—É–Ω–≥–æ–≤, –æ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ–æ?\n\n–ù–∞–ø–∏—à–∏ –µ–≥–æ!'
        await msg.answer(mess, reply_markup=types.ReplyKeyboardRemove())

        @dp.message_handler(lambda msg: msg.text == '–∑–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º' or msg.text == '–∑–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º!'
                                        or msg.text == '–∑–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º.' or msg.text == '–ó–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º'
                                        or msg.text == '–ó–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º!' or msg.text == '–ó–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º.')
        async def block_4(msg: types.Message):
            if Values.checker == 2:
                Values.checker = 3
                Values.correct_answers += 1
                mess = '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{}</b>\n\n–ö—Å—Ç–∞—Ç–∏, ' \
                       '–∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /points, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤!' \
                    .format(Values.correct_answers)
                await msg.answer(mess, parse_mode='html')

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button = types.KeyboardButton('–î–∞–ª–µ–µ')
                keyboard.add(button)

                await msg.answer('–ù–∞–∂–º–∏ "–î–∞–ª–µ–µ", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üå†', reply_markup=keyboard)

        # @dp.message_handler(lambda msg: msg.text != '–∑–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º' or msg.text != '–∑–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º!'
        #                                 or msg.text != '–∑–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º.' or msg.text != '–ó–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º'
        #                                 or msg.text != '–ó–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º!' or msg.text != '–ó–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º.')
        # async def block_4_wrong(msg: types.Message):
        #     if Values.checker == 2 and Values.written_attempts == 3:
        #         Values.written_attempts -= 1
        #         await msg.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å <b>{}</b> –ø–æ–ø—ã—Ç–∫–∏.'
        #                          .format(Values.written_attempts), parse_mode='html')
        #     elif Values.checker == 2 and Values.written_attempts == 2:
        #         Values.written_attempts -= 2
        #         await msg.answer(
        #             '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!')
        #     elif Values.checker == 2 and Values.written_attempts == 0:
        #         Values.checker = 3
        #         Values.written_attempts = 3
        #         await msg.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '
        #                          '<b>–∑–¥–µ—Å—å —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º</b>.', parse_mode='html')
        #         keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        #         button = types.KeyboardButton('–î–∞–ª–µ–µ')
        #         keyboard.add(button)
        #
        #         await msg.answer('–ù–∞–∂–º–∏ "–î–∞–ª–µ–µ", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üå†', reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '–î–∞–ª–µ–µ')
async def block_5(msg: types.Message):
    if Values.checker == 3:
        Values.checker = 4
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton('–ß—Ç–æ —ç—Ç–æ ¬ø ?')
        keyboard.add(button)
        await msg.answer_photo(open('pictures/info/iot.png', 'rb'), reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '–ß—Ç–æ —ç—Ç–æ ¬ø ?')
async def block_6(msg: types.Message):
    if Values.checker == 4:
        Values.checker = 5
        await msg.answer_photo(open('pictures/info/iot_2.png', 'rb'), reply_markup=types.ReplyKeyboardRemove())

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        keyboard.add(button)
        await msg.answer('–í—Ä–µ–º—è –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ! –ù–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".', reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
async def block_7(msg: types.Message):
    if Values.checker == 5:
        Values.checker = 6
        mess = '–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ. –ò–û–¢ ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–æ.\n\n–ù–æ –∏–Ω–æ–≥–¥–∞ –ø–æ—Å–ª–µ —Å–¥–∞—á–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ —Ñ–∏–∑–∏–∫–µ –∏–ª–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ ' \
               '–∫–æ–¥–∞ —Ö–æ—á–µ—Ç—Å—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã.\n\n–ò —Ç—É—Ç –ò–†–ò–¢-–†–¢–§ —Ç–æ–∂–µ –º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å!'
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton('–ö–∞–∫ –∂–µ?')
        keyboard.add(button)
        await msg.answer_photo(open('pictures/cybersport/win.png', 'rb'), caption=mess, reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '–ö–∞–∫ –∂–µ?')
async def block_8(msg: types.Message):
    if Values.checker == 6:
        Values.checker = 7
        await msg.answer_photo(open('pictures/info/tournaments.png', 'rb'), reply_markup=types.ReplyKeyboardRemove())

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton('–ì–¥–µ –∂–µ?')
        keyboard.add(button)
        await msg.answer('–ì–¥–µ –∂–µ —É–∑–Ω–∞–≤–∞—Ç—å –æ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ?', reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '–ì–¥–µ –∂–µ?')
async def block_9(msg: types.Message):
    if Values.checker == 7:
        Values.checker = 8
        mess = "<a href='https://t.me/Iritatoday'>Telegram-–∫–∞–Ω–∞–ª</a> –æ " \
               "—Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ —Ä–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ " \
               "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ò–†–ò–¢-–†–¢–§ –£—Ä–§–£."
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏–º')
        keyboard.add(button)
        await msg.answer_photo(open('pictures/logo/news.png', 'rb'),
                               caption=mess,
                               reply_markup=keyboard, parse_mode='html')


@dp.message_handler(lambda msg: msg.text == '–ü—Ä–æ–¥–æ–ª–∂–∏–º')
async def block_10(msg: types.Message):
    if Values.checker == 8:
        Values.checker = 9
        mess = "–í–µ—Ä–Ω–µ–º—Å—è –∫ –ª—é–±–∏–º–æ–π —É—á—ë–±–µ!\n\n–ü–æ—Ä–æ–π –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, —Ö–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å –æ —Ç–µ—Ö, –∫—Ç–æ –µ–≥–æ " \
               "–∑–∞–∫–æ–Ω—á–∏–ª.\n–û–± —ç—Ç–æ–º —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∂—É—Ç –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ –ò–†–ò–¢-–†–¢–§ –≤ –∫—Ä–∞—Ç–∫–æ–º <a href=" \
               "'https://vk.com/video/@iritrtf_urfu?z=video-165382372_456239060%2Fclub165382372%2Fpl_-165382372_-2'>" \
               "–≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫–µ</a>" \
               "\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å <a href='https://priem-rtf.urfu.ru/index.php?id=26065'>—Ç—É—Ç</a>"
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton('–ê —á—Ç–æ —Ç–∞–º —Å –¥–µ–Ω—å–≥–∞–º–∏?')
        keyboard.add(button)
        await msg.answer_photo(open('pictures/logo/urfu.png', 'rb'),
                               caption=mess,
                               reply_markup=keyboard,
                               parse_mode='html')


@dp.message_handler(lambda msg: msg.text == '–ê —á—Ç–æ —Ç–∞–º —Å –¥–µ–Ω—å–≥–∞–º–∏?')
async def block_11(msg: types.Message):
    if Values.checker == 9:
        Values.checker = 10
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton('–ß—Ç–æ –µ—â–µ?')
        keyboard.add(button)
        await msg.answer_photo(open('pictures/info/money.png', 'rb'), reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '–ß—Ç–æ –µ—â–µ?')
async def block_12(msg: types.Message):
    if Values.checker == 10:
        Values.checker = 11
        await msg.answer_photo(open('pictures/info/money_pro.png', 'rb'), reply_markup=types.ReplyKeyboardRemove())

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton('–£–∑–Ω–∞—Ç—å')
        keyboard.add(button)
        await msg.answer('–ê –µ—Å–ª–∏ —Ç—ã –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è? '
                         '–ö–∞–∫ –±—ã—Ç—å?\n–ú—ã —Ç–µ–±–µ –ø–æ–º–æ–∂–µ–º!\n\n–£–∑–Ω–∞—Ç—å –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –ò–†–ò–¢-–†–¢–§', reply_markup=keyboard)


async def list_of_destinations(msg):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton('–ò–í–¢ üñ•Ô∏è')
    button_2 = types.KeyboardButton('–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ üíª')
    button_3 = types.KeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è üíª')
    button_4 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üîí')
    button_5 = types.KeyboardButton('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, —Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏ üì°')
    button_6 = types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö üìü')
    button_7 = types.KeyboardButton('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏ —É–ø–∞–∫–æ–≤–æ—á–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ üìÑ')
    keyboard.row(button_1, button_2)
    keyboard.row(button_3, button_4)
    keyboard.row(button_5, button_6)
    keyboard.row(button_7)
    await msg.answer('–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '–£–∑–Ω–∞—Ç—å')
async def block_13(msg: types.Message):
    if Values.checker == 11:
        Values.checker = 12
        await list_of_destinations(msg)


@dp.message_handler(lambda msg: msg.text == '–ù–∞–∑–∞–¥')
async def calling_list_of_destinations(msg: types.Message):
    if Values.checker == 12:
        await list_of_destinations(msg)


@dp.message_handler(lambda msg: msg.text == 'Quiz')
async def quiz(msg: types.Message):
    if Values.quiz_ivt_block == 1:
        Values.quiz_ivt_block = 2
        question = '<b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–í–¢:</b>\n\n1. –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, ' \
                   '—Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ\n2. –≠–∫–æ–Ω–æ–º–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, ' \
                   '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤\n3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –¥–∏–∑–∞–π–Ω, –æ—Å–Ω–æ–≤—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º\n\n\n' \
                   '<i>–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!</i>'
        await msg.answer(question, reply_markup=types.ReplyKeyboardRemove(), parse_mode='html')
    elif Values.quiz_applied_inf_block == 1:
        Values.quiz_applied_inf_block = 2
        question = '<b>–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ö–∞–∫–∏—Ö?</b>' \
                   '\n\n1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –¥–∏–∑–∞–π–Ω –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏\n2. ' \
                   '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º, –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ\n3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ' \
                   '–∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º –≤ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¥–ª—è —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è' \
                   '\n\n<i>–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!</i>'
        await msg.answer(question, reply_markup=types.ReplyKeyboardRemove(), parse_mode='html')
    elif Values.quiz_software_engineering_block == 1:
        Values.quiz_software_engineering_block = 2
        question = '<b>–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:</b>\n\n' \
                   '1. –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ IT ' \
                   '–ø—Ä–æ–¥—É–∫—Ç–∞\n2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º –≤ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¥–ª—è —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö ' \
                   '–æ—Ç—Ä–∞—Å–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º, ' \
                   '–¥–∏–∑–∞–π–Ω\n\n<i>–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!</i>'
        await msg.answer(question, reply_markup=types.ReplyKeyboardRemove(), parse_mode='html')
    elif Values.quiz_information_security_block == 1:
        Values.quiz_information_security_block = 2
        question = '<b>–ß–µ–º –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å¬ª?</b>' \
                   '\n\n1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ ' \
                   '–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ, –≤–Ω–µ–¥—Ä—è—é—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –µ–≥–æ\n2. ' \
                   '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Ä–∞–∑–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ' \
                   '–Ω–∞–∑–µ–º–Ω–æ–≥–æ, –º–æ—Ä—Å–∫–æ–≥–æ, –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –±–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è\n3. –ó–∞–±–æ—Ç—è—Ç—Å—è ' \
                   '–æ –Ω–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ' \
                   '—Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏\n\n<i>–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!</i>'
        await msg.answer(question, reply_markup=types.ReplyKeyboardRemove(), parse_mode='html')
    elif Values.quiz_management_block == 1:
        Values.quiz_management_block = 2
        question = '<b>–ß—Ç–æ –∏–∑—É—á–∞—é—Ç —Å—Ç—É–¥–µ–Ω—Ç—ã –≤ —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã?</b>\n\n1. ' \
                   '–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –≤–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –Ω–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö' \
                   ' –æ–±—ä–µ–∫—Ç–∞—Ö –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n2. –°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ–Ω—Ç—Ä–æ–ª—è, ' \
                   '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n3. –í—Å–µ –∏–∑ ' \
                   '–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ\n\n<i>–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!</i>'
        await msg.answer(question, reply_markup=types.ReplyKeyboardRemove(), parse_mode='html')
    elif Values.quiz_production_technology_block == 1:
        Values.quiz_production_technology_block = 2
        question = '<b>–ö–µ–º —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å, –æ–∫–æ–Ω—á–∏–≤ –¥–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?</b>\n\n1. ' \
                   'frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º\n2. –ö–æ–ª–æ—Ä–∏—Å—Ç–æ–º\n3. ' \
                   '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–¥–∞–∂\n\n<i>–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!</i>'
        await msg.answer(question, reply_markup=types.ReplyKeyboardRemove(), parse_mode='html')


@dp.message_handler(lambda msg: msg.text == '1')
async def answer_1(msg: types.Message):
    if Values.quiz_ivt_block == 2:
        Values.quiz_ivt_block = 3
        Values.correct_answers += 1
        right_info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{}</b>' \
            .format(Values.correct_answers)
        await msg.answer(right_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_applied_inf_block == 2:
        Values.quiz_applied_inf_block = 3
        Values.correct_answers += 1
        right_info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{}</b>' \
            .format(Values.correct_answers)
        await msg.answer(right_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_software_engineering_block == 2:
        Values.quiz_software_engineering_block = 3
        Values.correct_answers += 1
        right_info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{}</b>' \
            .format(Values.correct_answers)
        await msg.answer(right_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_information_security_block == 2:
        Values.quiz_information_security_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>3. –ó–∞–±–æ—Ç—è—Ç—Å—è –æ –Ω–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö ' \
                     '–¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ' \
                     '—Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_management_block == 2:
        Values.quiz_management_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>3. –í—Å–µ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_production_technology_block == 2:
        Values.quiz_production_technology_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>2. –ö–æ–ª–æ—Ä–∏—Å—Ç–æ–º</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '2')
async def answer_2(msg: types.Message):
    if Values.quiz_ivt_block == 2:
        Values.quiz_ivt_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>1. –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_applied_inf_block == 2:
        Values.quiz_applied_inf_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –¥–∏–∑–∞–π–Ω –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_software_engineering_block == 2:
        Values.quiz_software_engineering_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>1. –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ IT</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_information_security_block == 2:
        Values.quiz_information_security_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>3. –ó–∞–±–æ—Ç—è—Ç—Å—è –æ –Ω–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö ' \
                     '–¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ' \
                     '—Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_management_block == 2:
        Values.quiz_management_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>3. –í—Å–µ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_production_technology_block == 2:
        Values.quiz_production_technology_block = 3
        Values.correct_answers += 1
        right_info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{}</b>' \
            .format(Values.correct_answers)
        await msg.answer(right_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '3')
async def answer_3(msg: types.Message):
    if Values.quiz_ivt_block == 2:
        Values.quiz_ivt_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>1. –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_applied_inf_block == 2:
        Values.quiz_applied_inf_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –¥–∏–∑–∞–π–Ω –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_software_engineering_block == 2:
        Values.quiz_software_engineering_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>1. –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ IT</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_information_security_block == 2:
        Values.quiz_information_security_block = 3
        Values.correct_answers += 1
        right_info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{}</b>' \
            .format(Values.correct_answers)
        await msg.answer(right_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_management_block == 2:
        Values.quiz_management_block = 3
        Values.correct_answers += 1
        right_info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{}</b>' \
            .format(Values.correct_answers)
        await msg.answer(right_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)
    elif Values.quiz_production_technology_block == 2:
        Values.quiz_production_technology_block = 3
        wrong_info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ. ' \
                     '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n<b>2. –ö–æ–ª–æ—Ä–∏—Å—Ç–æ–º</b>'
        await msg.answer(wrong_info, parse_mode='html')

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
        keyboard.add(button)

        await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                         reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
async def next_task(msg: types.Message):
    @dp.message_handler()
    async def check_answer(msg: types.Message):
        # –±–ª–æ–∫ –ø–æ –ò–í–¢
        if Values.quiz_ivt_block_next_task == 1 and msg.text == '25' and Values.written_attempts != 0:
            Values.written_attempts = 3
            Values.quiz_ivt_block_next_task = 2
            Values.correct_answers += 1
            info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}' \
                .format(Values.correct_answers)
            await msg.answer(info)

            keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            keyboard_back.add(button_back)

            await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                             reply_markup=keyboard_back)
        elif Values.quiz_ivt_block_next_task == 1 and msg.text != '25':
            if Values.written_attempts == 3:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.' \
                    .format(Values.written_attempts)
                await msg.answer(info)
            elif Values.written_attempts == 2:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, ' \
                       '–≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!'
                await msg.answer(info)
            elif Values.written_attempts == 1:
                Values.written_attempts = 3
                Values.quiz_ivt_block_next_task = 2
                info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 25'
                await msg.answer(info)

                keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                keyboard_back.add(button_back)

                await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                                 reply_markup=keyboard_back)
        # –±–ª–æ–∫ –ø–æ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ
        elif Values.quiz_applied_inf_block_next_task == 1 and msg.text == '9' and Values.written_attempts != 0:
            Values.written_attempts = 3
            Values.quiz_applied_inf_block_next_task = 2
            Values.correct_answers += 1
            info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}' \
                .format(Values.correct_answers)
            await msg.answer(info)

            keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            button_back = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
            keyboard_back.add(button_back)

            await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                             reply_markup=keyboard_back)
        elif Values.quiz_applied_inf_block_next_task == 1 and msg.text != '9':
            if Values.written_attempts == 3:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.' \
                    .format(Values.written_attempts)
                await msg.answer(info)
            elif Values.written_attempts == 2:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, ' \
                       '–≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!'
                await msg.answer(info)
            elif Values.written_attempts == 1:
                Values.written_attempts = 3
                Values.quiz_applied_inf_block_next_task = 2
                info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 9'
                await msg.answer(info)

                keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                button_back = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞')
                keyboard_back.add(button_back)

                await msg.answer('–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"!',
                                 reply_markup=keyboard_back)
        elif Values.quiz_applied_inf_block_next_task == 3 and msg.text == '44' and Values.written_attempts != 0:
            Values.written_attempts = 3
            Values.quiz_applied_inf_block_next_task = 4
            Values.correct_answers += 1
            info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}' \
                .format(Values.correct_answers)
            await msg.answer(info)

            keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            keyboard_back.add(button_back)

            await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                             reply_markup=keyboard_back)
        elif Values.quiz_applied_inf_block_next_task == 3 and msg.text != '44':
            if Values.written_attempts == 3:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.' \
                    .format(Values.written_attempts)
                await msg.answer(info)
            elif Values.written_attempts == 2:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, ' \
                       '–≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!'
                await msg.answer(info)
            elif Values.written_attempts == 1:
                Values.written_attempts = 3
                Values.quiz_applied_inf_block_next_task = 4
                info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 44'
                await msg.answer(info)

                keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                keyboard_back.add(button_back)

                await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                                 reply_markup=keyboard_back)
        # –±–ª–æ–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏
        elif Values.quiz_software_engineering_block_next_task == 1 and msg.text == '88999' and Values.written_attempts != 0:
            Values.written_attempts = 3
            Values.quiz_software_engineering_block_next_task = 2
            Values.correct_answers += 1
            info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}' \
                .format(Values.correct_answers)
            await msg.answer(info)

            keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            keyboard_back.add(button_back)

            await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                             reply_markup=keyboard_back)
        elif Values.quiz_software_engineering_block_next_task == 1 and msg.text != '88999':
            if Values.written_attempts == 3:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.' \
                    .format(Values.written_attempts)
                await msg.answer(info)
            elif Values.written_attempts == 2:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, ' \
                       '–≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!'
                await msg.answer(info)
            elif Values.written_attempts == 1:
                Values.written_attempts = 3
                Values.quiz_software_engineering_block_next_task = 2
                info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 88999'
                await msg.answer(info)

                keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                keyboard_back.add(button_back)

                await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                                 reply_markup=keyboard_back)
        elif Values.quiz_software_engineering_block_next_task == 3 and msg.text == '24' and Values.written_attempts != 0:
            Values.written_attempts = 3
            Values.quiz_software_engineering_block_next_task = 4
            Values.correct_answers += 1
            info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}' \
                .format(Values.correct_answers)
            await msg.answer(info)

            keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            keyboard_back.add(button_back)

            await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                             reply_markup=keyboard_back)
        elif Values.quiz_software_engineering_block_next_task == 3 and msg.text != '24':
            if Values.written_attempts == 3:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.' \
                    .format(Values.written_attempts)
                await msg.answer(info)
            elif Values.written_attempts == 2:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, ' \
                       '–≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!'
                await msg.answer(info)
            elif Values.written_attempts == 1:
                Values.written_attempts = 3
                Values.quiz_software_engineering_block_next_task = 4
                info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 24'
                await msg.answer(info)

                keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                keyboard_back.add(button_back)

                await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                                 reply_markup=keyboard_back)
        # –±–ª–æ–∫ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        elif Values.quiz_information_security_block_next_task == 1 and msg.text == '70' and Values.written_attempts != 0:
            Values.written_attempts = 3
            Values.quiz_information_security_block_next_task = 2
            Values.correct_answers += 1
            info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}' \
                .format(Values.correct_answers)
            await msg.answer(info)

            keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            keyboard_back.add(button_back)

            await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                             reply_markup=keyboard_back)
        elif Values.quiz_information_security_block_next_task == 1 and msg.text != '70':
            if Values.written_attempts == 3:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.' \
                    .format(Values.written_attempts)
                await msg.answer(info)
            elif Values.written_attempts == 2:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, ' \
                       '–≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!'
                await msg.answer(info)
            elif Values.written_attempts == 1:
                Values.written_attempts = 3
                Values.quiz_information_security_block_next_task = 2
                info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 70'
                await msg.answer(info)

                keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                keyboard_back.add(button_back)

                await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                                 reply_markup=keyboard_back)
        elif Values.quiz_information_security_block_next_task == 3 and msg.text == '4' and Values.written_attempts != 0:
            Values.written_attempts = 3
            Values.quiz_information_security_block_next_task = 4
            Values.correct_answers += 1
            info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}' \
                .format(Values.correct_answers)
            await msg.answer(info)

            keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            keyboard_back.add(button_back)

            await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                             reply_markup=keyboard_back)
        elif Values.quiz_information_security_block_next_task == 3 and msg.text != '4':
            if Values.written_attempts == 3:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.' \
                    .format(Values.written_attempts)
                await msg.answer(info)
            elif Values.written_attempts == 2:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, ' \
                       '–≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!'
                await msg.answer(info)
            elif Values.written_attempts == 1:
                Values.written_attempts = 3
                Values.quiz_information_security_block_next_task = 4
                info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 4'
                await msg.answer(info)

                keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                keyboard_back.add(button_back)

                await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                                 reply_markup=keyboard_back)
        # –±–ª–æ–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤ —Å–∏—Å—Ç–µ–º–∞—Ö
        elif Values.quiz_management_block_next_task == 1 and msg.text == '90' and Values.written_attempts != 0:
            Values.written_attempts = 3
            Values.quiz_management_block_next_task = 2
            Values.correct_answers += 1
            info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}' \
                .format(Values.correct_answers)
            await msg.answer(info)

            keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            keyboard_back.add(button_back)

            await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                             reply_markup=keyboard_back)
        elif Values.quiz_management_block_next_task == 1 and msg.text != '90':
            if Values.written_attempts == 3:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.' \
                    .format(Values.written_attempts)
                await msg.answer(info)
            elif Values.written_attempts == 2:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, ' \
                       '–≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!'
                await msg.answer(info)
            elif Values.written_attempts == 1:
                Values.written_attempts = 3
                Values.quiz_management_block_next_task = 2
                info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 90'
                await msg.answer(info)

                keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                keyboard_back.add(button_back)

                await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                                 reply_markup=keyboard_back)
        # –±–ª–æ–∫ –ø–æ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏–∏
        elif Values.quiz_production_technology_block_next_task == 1 and msg.text == '24' and Values.written_attempts != 0:
            Values.written_attempts = 3
            Values.quiz_production_technology_block_next_task = 2
            Values.correct_answers += 1
            info = '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {}' \
                .format(Values.correct_answers)
            await msg.answer(info)

            keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            keyboard_back.add(button_back)

            await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                             reply_markup=keyboard_back)
        elif Values.quiz_production_technology_block_next_task == 1 and msg.text != '24':
            if Values.written_attempts == 3:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {} –ø–æ–ø—ã—Ç–∫–∏.' \
                    .format(Values.written_attempts)
                await msg.answer(info)
            elif Values.written_attempts == 2:
                Values.written_attempts -= 1
                info = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –•–æ—Ä–æ—à–æ –æ–±–¥—É–º–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, ' \
                       '–≤–µ–¥—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞!'
                await msg.answer(info)
            elif Values.written_attempts == 1:
                Values.written_attempts = 3
                Values.quiz_production_technology_block_next_task = 2
                info = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 24'
                await msg.answer(info)

                keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
                keyboard_back.add(button_back)

                await msg.answer('–ù–∞–∂–º–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!',
                                 reply_markup=keyboard_back)

    if Values.quiz_ivt_block == 3 and Values.quiz_ivt_block_next_task == 0:
        Values.quiz_ivt_block_next_task = 1
        await msg.answer_photo(open('pictures/info/task_ivt.png', 'rb'), '–†–µ—à–∏ –∑–∞–¥–∞—á—É:')
    elif Values.quiz_applied_inf_block == 3 and Values.quiz_applied_inf_block_next_task == 0:
        Values.quiz_applied_inf_block_next_task = 1
        await msg.answer_photo(open('pictures/info/task_applied_inf.png', 'rb'), '–†–µ—à–∏ –∑–∞–¥–∞—á—É:')
    elif Values.quiz_applied_inf_block == 3 and Values.quiz_applied_inf_block_next_task == 2:
        Values.quiz_applied_inf_block_next_task = 3
        await msg.answer_photo(open('pictures/info/task_applied_inf_2.png', 'rb'), '–†–µ—à–∏ –∑–∞–¥–∞—á—É:')
    elif Values.quiz_software_engineering_block == 3 and Values.quiz_software_engineering_block_next_task == 0:
        Values.quiz_software_engineering_block_next_task = 1
        await msg.answer_photo(open('pictures/info/task_software_engineering.png', 'rb'), '–†–µ—à–∏ –∑–∞–¥–∞—á—É:')
    elif Values.quiz_software_engineering_block == 3 and Values.quiz_software_engineering_block_next_task == 2:
        Values.quiz_software_engineering_block_next_task = 3
        await msg.answer_photo(open('pictures/info/task_software_engineering_2.png.png', 'rb'), '–†–µ—à–∏ –∑–∞–¥–∞—á—É:')
    elif Values.quiz_information_security_block == 3 and Values.quiz_information_security_block_next_task == 0:
        Values.quiz_information_security_block_next_task = 1
        await msg.answer_photo(open('pictures/info/task_information_security.png', 'rb'), '–†–µ—à–∏ –∑–∞–¥–∞—á—É:')
    elif Values.quiz_information_security_block == 3 and Values.quiz_information_security_block_next_task == 2:
        Values.quiz_information_security_block_next_task = 3
        await msg.answer_photo(open('pictures/info/task_information_security_2.png.png.png', 'rb'), '–†–µ—à–∏ –∑–∞–¥–∞—á—É:')
    elif Values.quiz_management_block == 3 and Values.quiz_management_block_next_task == 0:
        Values.quiz_management_block_next_task = 1
        await msg.answer_photo(open('pictures/info/task_management.png', 'rb'), '–†–µ—à–∏ –∑–∞–¥–∞—á—É:')
    elif Values.quiz_production_technology_block == 3 and Values.quiz_production_technology_block_next_task == 0:
        Values.quiz_production_technology_block_next_task = 1
        await msg.answer_photo(open('pictures/info/task_printing_technologies.png', 'rb'), '–†–µ—à–∏ –∑–∞–¥–∞—á—É:')


@dp.message_handler(lambda msg: msg.text == '–ò–í–¢ üñ•Ô∏è')
async def ivt_block(msg: types.Message):
    if Values.checker == 12 and Values.viewing_ivt_block == 0:
        Values.quiz_ivt_block = 1
        Values.viewing_ivt_block = 1
        keyboard = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                                              url='https://priem-rtf.urfu.ru/ru/baccalaureate/courses/')
        button_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫',
                                              url='https://vk.com/video-165382372_456239068')
        keyboard.row(button_1)
        keyboard.row(button_2)
        await msg.answer_photo(open('pictures/info/ivt.png', 'rb'),
                               reply_markup=keyboard)

        keyboard_quiz = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_quiz = types.KeyboardButton('Quiz')
        keyboard_quiz.add(button_quiz)

        await msg.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "Quiz"',
                         reply_markup=keyboard_quiz)
    elif Values.checker == 12 and Values.viewing_ivt_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


@dp.message_handler(lambda msg: msg.text == '–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ üíª')
async def ivt_block(msg: types.Message):
    if Values.checker == 12 and Values.viewing_applied_inf_block == 0:
        Values.quiz_applied_inf_block = 1
        Values.viewing_applied_inf_block = 1
        keyboard = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                                              url='https://programs.edu.urfu.ru/ru/9796/documents/2021/')
        button_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫',
                                              url='https://vk.com/video-165382372_456239065')
        keyboard.row(button_1)
        keyboard.row(button_2)
        await msg.answer_photo(open('pictures/info/applied_inf.png', 'rb'),
                               reply_markup=keyboard)

        keyboard_quiz = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_quiz = types.KeyboardButton('Quiz')
        keyboard_quiz.add(button_quiz)

        await msg.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "Quiz"',
                         reply_markup=keyboard_quiz)
    elif Values.checker == 12 and Values.viewing_applied_inf_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


@dp.message_handler(lambda msg: msg.text == '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è üíª')
async def software_engineering_block(msg: types.Message):
    if Values.checker == 12 and Values.viewing_software_engineering_block == 0:
        Values.quiz_software_engineering_block = 1
        Values.viewing_software_engineering_block = 1
        keyboard = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                                              url='https://programs.edu.urfu.ru/ru/9797/documents/2021/')
        button_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫',
                                              url='https://vk.com/video-165382372_456239066')
        keyboard.row(button_1)
        keyboard.row(button_2)
        await msg.answer_photo(open('pictures/info/software_engineering.png', 'rb'),
                               reply_markup=keyboard)

        keyboard_quiz = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_quiz = types.KeyboardButton('Quiz')
        keyboard_quiz.add(button_quiz)

        await msg.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "Quiz"',
                         reply_markup=keyboard_quiz)
    elif Values.checker == 12 and Values.viewing_software_engineering_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


@dp.message_handler(lambda msg: msg.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üîí')
async def information_security_block(msg: types.Message):
    if Values.checker == 12 and Values.viewing_information_security_block == 0:
        Values.quiz_information_security_block = 1
        Values.viewing_information_security_block = 1
        keyboard = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                                              url='https://programs.edu.urfu.ru/ru/10216/documents/2021/')
        button_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫',
                                              url='https://vk.com/video-165382372_456239076')
        keyboard.row(button_1)
        keyboard.row(button_2)
        await msg.answer_photo(open('pictures/info/information_security.png', 'rb'),
                               reply_markup=keyboard)

        keyboard_quiz = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_quiz = types.KeyboardButton('Quiz')
        keyboard_quiz.add(button_quiz)

        await msg.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "Quiz"',
                         reply_markup=keyboard_quiz)
    elif Values.checker == 12 and Values.viewing_information_security_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


async def electronics(msg):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_1 = types.KeyboardButton('–ò–Ω—Ñ–æ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏')
    button_2 = types.KeyboardButton('–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤')
    button_3 = types.KeyboardButton('–†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞')
    keyboard.add(button_1)
    keyboard.add(button_2)
    keyboard.add(button_3)

    await msg.answer('–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, —Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏ üì°')
async def electronics_block(msg: types.Message):
    if Values.checker == 12 and Values.viewing_electronics_block == 0:
        Values.quiz_electronics_block = 1
        Values.viewing_electronics_block = 1

        await electronics(msg)

    elif Values.checker == 12 and Values.viewing_electronics_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


@dp.message_handler(lambda msg: msg.text == '–ò–Ω—Ñ–æ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏')
async def communication_systems(msg: types.Message):
    if Values.checker == 12 and Values.viewing_communication_systems_block == 0:
        Values.electronics_count += 1
        Values.quiz_communication_systems_block = 1
        Values.viewing_communication_systems_block = 1
        keyboard = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                                              url='https://programs.edu.urfu.ru/ru/9813/documents/2021/')
        button_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫',
                                              url='https://vk.com/video-165382372_456239077')
        keyboard.row(button_1)
        keyboard.row(button_2)
        await msg.answer_photo(open('pictures/info/communication.png', 'rb'),
                               reply_markup=keyboard)
        if Values.electronics_count != 3:
            await electronics(msg)
        else:
            await list_of_destinations(msg)
    elif Values.checker == 12 and Values.viewing_communication_systems_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


@dp.message_handler(lambda msg: msg.text == '–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤')
async def construction(msg: types.Message):
    if Values.checker == 12 and Values.viewing_construction_block == 0:
        Values.electronics_count += 1
        Values.quiz_construction_block = 1
        Values.viewing_construction_block = 1
        keyboard = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                                              url='https://programs.edu.urfu.ru/ru/9814/documents/2021/')
        button_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫',
                                              url='https://vk.com/video-165382372_456239077')
        keyboard.row(button_1)
        keyboard.row(button_2)
        await msg.answer_photo(open('pictures/info/construction.png', 'rb'),
                               reply_markup=keyboard)
        if Values.electronics_count != 3:
            await electronics(msg)
        else:
            await list_of_destinations(msg)
    elif Values.checker == 12 and Values.viewing_construction_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


@dp.message_handler(lambda msg: msg.text == '–†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∞')
async def construction(msg: types.Message):
    if Values.checker == 12 and Values.viewing_radio_block == 0:
        Values.electronics_count += 1
        Values.quiz_radio_block = 1
        Values.viewing_radio_block = 1
        keyboard = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                                              url='https://programs.edu.urfu.ru/ru/9812/documents/2021/')
        button_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫',
                                              url='https://vk.com/video-165382372_456239077')
        keyboard.row(button_1)
        keyboard.row(button_2)
        await msg.answer_photo(open('pictures/info/radio.png', 'rb'),
                               reply_markup=keyboard)
        if Values.electronics_count != 3:
            await electronics(msg)
        else:
            await list_of_destinations(msg)
    elif Values.checker == 12 and Values.viewing_construction_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


@dp.message_handler(lambda msg: msg.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö üìü')
async def management_block(msg: types.Message):
    if Values.checker == 12 and Values.viewing_management_block == 0:
        Values.quiz_management_block = 1
        Values.viewing_management_block = 1
        keyboard = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                                              url='https://programs.edu.urfu.ru/ru/9846/documents/2021/')
        button_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫',
                                              url='https://vk.com/video-165382372_456239070')
        keyboard.row(button_1)
        keyboard.row(button_2)
        await msg.answer_photo(open('pictures/info/management.png', 'rb'),
                               reply_markup=keyboard)

        keyboard_quiz = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_quiz = types.KeyboardButton('Quiz')
        keyboard_quiz.add(button_quiz)

        await msg.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "Quiz"',
                         reply_markup=keyboard_quiz)
    elif Values.checker == 12 and Values.viewing_information_security_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


@dp.message_handler(lambda msg: msg.text == '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏ —É–ø–∞–∫–æ–≤–æ—á–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ üìÑ')
async def production_technology_block(msg: types.Message):
    if Values.checker == 12 and Values.viewing_production_technology_block == 0:
        Values.quiz_production_technology_block = 1
        Values.viewing_production_technology_block = 1
        keyboard = types.InlineKeyboardMarkup()
        button_1 = types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
                                              url='https://programs.edu.urfu.ru/ru/9833/documents/2020/')
        button_2 = types.InlineKeyboardButton(text='–ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥–µ–æ-—Ä–æ–ª–∏–∫',
                                              url='https://vk.com/video-165382372_456239071')
        keyboard.row(button_1)
        keyboard.row(button_2)
        await msg.answer_photo(open('pictures/info/printing_technologies.png', 'rb'),
                               reply_markup=keyboard)

        keyboard_quiz = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_quiz = types.KeyboardButton('Quiz')
        keyboard_quiz.add(button_quiz)

        await msg.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "Quiz"',
                         reply_markup=keyboard_quiz)
    elif Values.checker == 12 and Values.viewing_production_technology_block == 1:
        await msg.answer('–¢—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!')


if __name__ == '__main__':
    executor.start_polling(dp)
